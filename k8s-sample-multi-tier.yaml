---
# frontend application sample nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: frontend-app
      env: prod
      version: "1"
  template:
    metadata:
      labels:
        app: frontend-app
        env: prod
        version: "1"
    spec:
      containers:
      - name: frontend-container
        image: nginx
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
          protocol: TCP
        volumeMounts: # persistent volume mount
        - mountPath: /data
          name: pv-sample
      volumes: # linking persistent volume claim
      - name: pv-sample
        persistentVolumeClaim:
          claimName: pvc-sample

---
# service to expose frontend app
apiVersion: v1
kind: Service
metadata:
  name: frontend-svc
spec:
  type: NodePort
  selector:
    app: frontend-app
  ports:
  - port: 80
    targetPort: 80
---
# middleware app sample httpd
apiVersion: apps/v1
kind: Deployment
metadata:
  name: middleware-app
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: middleware-app
      env: prod
      version: "1"
  template:
    metadata:
      labels:
        app: middleware-app
        env: prod
        version: "1"
    spec:
      containers:
      - name: middleware-app
        image: httpd
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 80
          protocol: TCP
        volumeMounts: # persistent volume mount
        - mountPath: /data
          name: pv-sample
      volumes: # linking persistent volume claim
      - name: pv-sample
        persistentVolumeClaim:
          claimName: pvc-sample

---
# service to expose middleware within the cluster
apiVersion: v1
kind: Service
metadata:
  name: middleware-svc
spec:
  type: ClusterIP
  selector:
    app: middleware-app
  ports:
  - port: 80
    targetPort: 80
---
# backend database sample mysql
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-db
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
        app: backend-db
        env: prod
        version: "1"
  template:
    metadata:
      labels:
        app: backend-db
        env: prod
        version: "1"
    spec:
      containers:
      - name: backend-db
        image: mysql:5.7
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "dbrootuser"
        volumeMounts: # persistent volume mount
        - mountPath: /data
          name: pv-sample
      volumes: # linking persistent volume claim
      - name: pv-sample
        persistentVolumeClaim:
          claimName: pvc-sample

---
# service to expose backend db within the cluster
apiVersion: v1
kind: Service
metadata:
  name: backend-svc
spec:
  type: ClusterIP
  selector:
    app: backend-db
  ports:
  - port: 3306
    targetPort: 3306

---
---
# creating persistent volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-sample
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: /data
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem
---
# persistent Volume claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-sample
spec:
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce