---
# this file contains of K8s services
# 1) Deployment > 2)Replicaset > 3)Pods
# using "ver" data help to rollout another version
apiVersion: apps/v1 # apps/v1 is used for ReplicaSet
kind: Deployment # k8s resource is Deployment
metadata:
  name: sample-httpd #name of the deployment
  labels:
    app: httpd
spec:
  replicas: 3 # number of pods to run all the time
  minReadySeconds: 5 # ready delay seconds
  selector: # selecting labels to maintain replicas
    matchLabels: # labels to match with container spec
      app: httpd # label
      env: prod # label
  strategy: # how update / upgrade should happen
    type: RollingUpdate # type of update Rolling / Recreate
    rollingUpdate:
      maxSurge: 25% # max surge value default is 25%
      maxUnavailable: 25% # max unavailability value default is 25%
  template: # pod / container creation template
    metadata:
      labels: # labels to match replication
        app: httpd
        env: prod
        # @@@  comment ver 1.0 and uncomment ver 2.0 for rolling update to ver 2.0
        ver: "1.0" # version no we can change it for rollout 
        #ver: "2.0" # version no we can change it for rollout 
    spec: # specification of container image etc. (pod spec)
      containers:
      - name: sample-httpd # name of the container
        # @@@  comment ver 1.0 image and uncomment ver 2.0 image for rolling update to ver 2.0
        image: httpd:2-alpine # which docker image need to pull and deploy (ver-1) 
        #image: httpd:2.4.50-alpine # new rollout image (ver-2)
        resources: # we can specify the CPU and RAM (now its default with no values in resources section)
        ports: # ports need to map with container
        - containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: httpd-service-dep
spec:
  selector:
    app: httpd
  type: NodePort
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80



# To create the resources
# kubectl apply -f <file-name.yaml>

# to check the created resources use below commends
# to check created pods
# kubectl get pods

# to check created deployment
# kubectl get deploy

# to check replicaset
# kubectl get rs

# after creating Ver-1 and Ver-2 check the rollout history
# kubectl rollout history deployment <deployment-name>

# to undo the rollout
# kubectl rollout undo deployment <deployment-name> --to-revision=<revision-no>

# to delete the resource
# kubectl delete -f <file-name.yaml>